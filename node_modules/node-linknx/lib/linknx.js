//var callback = require('./callback').callback;
var net = require('net');
var fs = require('fs');
var xml2js = require('xml2js')
var EventSource = require('eventsource');


exports.liste_objets_linknx = function (res, callback) {

    var contenu_liste_objet_linknx = fs.readFileSync("/etc/linknx/linknx.xml", "UTF-8");
    var xml2js = require('xml2js');
    var parser = new xml2js.Parser();
    parser.parseString(contenu_liste_objet_linknx, function (err, data) {
        var data_string = JSON.stringify(data)
        var rgxp = /<!--[^*]+-->/gi
        var resultat = data_string.replace(rgxp, "");
        var resultat_json = JSON.parse(resultat);

        var retour = '{"objets":[';
        resultat_json.config.objects[0].object.forEach(function (item, index) {
            var nom_linknx = resultat_json.config.objects[0].object[index]._;
            if (!nom_linknx && nom_linknx == '') {
                nom_linknx = '';
            }
            var id_linknx = resultat_json.config.objects[0].object[index].$.id;
            
            retour = retour + '{"id_linknx":"' + id_linknx + '"},'
        });

        retour = retour.substring(0, retour.length - 1);
        retour = retour + "]}"
        var retour_liste_objet = JSON.parse(retour);
        //console.log(retour_liste_objet)
        callback(retour_liste_objet, res)
    });
}


exports.refresh_linknx = function(HOST,PORT, interval, callback) { 
    var HOST = HOST;
    var PORT = PORT;
    var data_xml = '<read><objects></objects></read>\04';
    setInterval(function(){
      ask_status(HOST,PORT,data_xml, res, callback)
    }, interval);
  
};

exports.status_all = function(HOST,PORT, callback) { 
    var HOST = HOST;
    var PORT = PORT;
    var data_xml = '<read><objects></objects></read>\04';
    ask_status(HOST,PORT,data_xml, res, callback)
};

exports.status_multi = function(HOST,PORT,liste_object, res, callback) { 

    var HOST = HOST;
    var PORT = PORT;
    var data_xml = '<read><objects>';//'<read><objects></objects></read>\04';
    for(var i= 0; i < liste_object.objects.length; i++){
      var id_linknx = liste_object.objects[i].id;
      data_xml = data_xml + '<object id="'+ id_linknx + '"/>';
    }
    data_xml = data_xml + '</objects></read>\04';
    ask_status(HOST,PORT,data_xml, res, callback)
};

exports.change_state = function(HOST,PORT,object,value,callback) { 
    var HOST = HOST;
    var PORT = PORT;
    var data_xml = '<write><object id="' + object + '" value="' + value + '"/></write>\04';
    write_linknx(HOST,PORT,data_xml, callback)
};

exports.change_state_multi = function(HOST,PORT,Liste_objects_linknx,callback) { 
    var HOST = HOST;
    var PORT = PORT;
    var data_xml = "";
    for(var i= 0; i < Liste_objects_linknx.objects.length; i++){
      var id_linknx = Liste_objects_linknx.objects[i].id;
      var val_linknx = Liste_objects_linknx.objects[i].value;
      var data_xml = '<write><object id="' + id_linknx + '" value="' + val_linknx + '"/></write>\04';
       write_linknx(HOST,PORT,data_xml, callback)
    }
};

exports.eventsource_linknx = function(HOST,PORT,callback) { 
  
     var HOST = HOST;
    var PORT = PORT;
    var es = new EventSource('http://'+HOST+':'+PORT+'/event_linknx.php');
    es.onmessage = function(e) {
      var message = e.data;
      var type = e.type;
      var lastEventId = e.lastEventId;
      var id = message.id;

      eventsource_message(message,callback);
    };
    
    es.onerror = function() {
        var retour = 'ERROR';
        var string_json = new Array();
        string_json = '{"notify-Error":[]}';
          string_json = JSON.parse(string_json);
          retour = string_json;
          callback(retour);
    };
   

};

/*


*/
/* Changement etat */
var write_linknx = function(HOST,PORT,data_xml, callback) {
  var client = new net.Socket();
  client.connect(PORT, HOST, function() {
      console.log('CONNECTED TO: ' + HOST + ':' + PORT);
      // Write a message to the socket as soon as the client is connected, the server will receive it as message from the client 
      client.write(data_xml);
  });
  // Add a 'data' event handler for the client socket
  // data is what the server sent to this socket
  var buffer = '';
  var string_json = new Array();
  string_json = '{"reponse":[]}';
  string_json = JSON.parse(string_json);
  client.on('data', function(data) {
    data = data.toString('utf8'); // assuming utf8 data...
      var prev = 0, next;
      data = data.toString('utf8'); // assuming utf8 data...
      while ((next = data.indexOf('\04', prev)) > -1) {
        buffer += data.substring(prev, next);
        var xml = buffer.trim();
        var parser = new xml2js.Parser()
        parser.parseString(xml, function (err, res) {
          if (err) return console.log(err.message)
              var json_temp
              var status_reponse = res.write.$.status;
              if(status_reponse == "success"){
                  json_temp = '{"status":"'+status_reponse+'"}';
              }
              else if(status_reponse == "error"){
                  var erreur = res.write._;
                  json_temp = '{"status":"'+status_reponse+'","error":"'+erreur+'"}';
              }
              else {
                  json_temp = '{"status":"Erreur Inconnue"}';
              }
              string_json.reponse.push(json_temp);
              callback(string_json);
             //client.disconnect() 
             client.destroy();
        })
        buffer = '';
        prev = next + 1;
      }
      buffer += data.substring(prev);
  });
}

/* demande etat linknx */
var ask_status = function(HOST,PORT,data_xml, res, callback) {

  var client = new net.Socket();
  client.connect(PORT, HOST, function() {
      console.log('CONNECTED TO: ' + HOST + ':' + PORT);
      // Write a message to the socket as soon as the client is connected, the server will receive it as message from the client 
      client.write(data_xml);
  });
  // Add a 'data' event handler for the client socket
  // data is what the server sent to this socket
  var buffer = '';
  //var string_json = new Array();
 // string_json = '{"objects":[]}';
 
  //string_json = JSON.parse(string_json);
   var string_json ='{"objects":[';
  client.on('data', function(data) {
      //console.log(data)
      var prev = 0, next;
      data = data.toString('utf8'); // assuming utf8 data...

      while ((next = data.indexOf('\n', prev)) > -1) {
        buffer += data.substring(prev, next);
        var json_retour = convertToJson(buffer);
        //console.log(json_retour)
        if(json_retour != null){
         // string_json.objects.push(json_retour);
          string_json = string_json + json_retour + ','


        }
        buffer = '';
        prev = next + 1;
      }
      buffer += data.substring(prev);


      var string_jsonLen = string_json.length;
      string_json = string_json.slice(0,string_jsonLen-1);
      string_json = string_json + ']}'

      string_json = JSON.parse(string_json);
     // string_json = JSON.stringify(string_json);

     
      callback(string_json, res);
  });

  // Add a 'close' event handler for the client socket
  client.on('close', function() {
      console.log('Connection closed');
  });
}


/* Convertion retour xml vers json */
function convertToJson(xml_linknx){
  var json;
  var xml = xml_linknx.trim();
  var rgxp_read_status = /<read status="success">/i
  var match_read_status = rgxp_read_status.test(xml);

  var rgxp_objects = /<objects>/i
  var match_objects = rgxp_objects.test(xml);

  var rgxp_end_objects = /<\/objects>/i
  var match_end_objects = rgxp_end_objects.test(xml);

  var rgxp_end_read = /<\/read>/i
  var match_end_read = rgxp_end_read.test(xml);

  if ( match_read_status == true || match_objects == true || match_end_objects == true || match_end_read == true ){
    return null;
  }
  
  var parser = new xml2js.Parser()
  parser.parseString(xml, function (err, res) {
      if (err) return console.log(err.message)
        if(res.object.$){
          var id_obj = res.object.$.id;
          var val_obj = res.object.$.value;
          json = '{"id":"'+id_obj+'","value":"'+val_obj+'"}';
         // json = JSON.stringify(json)
        }
  })

return json;
}

var eventsource_message = function(message_reply, callback) {
  var retour;
  var parser = new xml2js.Parser()
  var xml = message_reply;
  
  parser.parseString(xml, function (err, res) {
      if (err) return console.log(err.message)
        if(res != null){
            try {
              if(res.notify && res.notify != null){
            
                var string_json = new Array();
                string_json = '{"notify":[';
              
                var notify = res.notify;
                var value = notify._;
                var id = notify.$.id;
                var json = '{"id":"'+id+'","value":"'+value+'"}';
                string_json = string_json + json;
                string_json = string_json + ']}';
                string_json = JSON.parse(string_json);
                retour = string_json;
               // console.log(retour)
                callback(retour);
              }
          }
          catch(err) {
              console.log(err)
          }
          
        }
        
        
  })
 // callback(message);

}
